{"version":3,"sources":["OperationSelection.tsx"],"names":["operations","transform","title","iconID","operationID","adjust","OperationSelection","allowedTransformOperations","allowedAdjustmentOperations","EditorContext","isTransformOnly","isAdjustmentOnly","selectedOperationGroup","setSelectedOperationGroup","React","useState","setEditingMode","editingModeState","filteredOperations","filteredTransforms","filter","op","includes","filteredAdjustments","styles","opRow","map","item","index","opContainer","modeRow","modeButton","backgroundColor","StyleSheet","create","height","width","justifyContent","alignItems","marginLeft","flexDirection","flex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  Platform,\r\n  StyleSheet,\r\n  View,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n} from \"react-native\";\r\nimport { Icon } from \"../components/Icon\";\r\nimport { IconButton } from \"../components/IconButton\";\r\nimport { editingModeState, EditingModes } from \"../Store\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { useContext } from \"react\";\r\nimport {\r\n  AdjustmentOperations,\r\n  EditingOperations,\r\n  EditorContext,\r\n  TransformOperations,\r\n} from \"..\";\r\nimport { useMemo } from \"react\";\r\n\r\ninterface Operation<T> {\r\n  title: string;\r\n  iconID: React.ComponentProps<typeof Icon>[\"iconID\"];\r\n  operationID: T;\r\n}\r\n\r\ninterface Operations {\r\n  transform: Operation<TransformOperations>[];\r\n  adjust: Operation<AdjustmentOperations>[];\r\n}\r\n\r\nconst operations: Operations = {\r\n  transform: [\r\n    {\r\n      title: \"Crop\",\r\n      iconID: \"crop\",\r\n      operationID: \"crop\",\r\n    },\r\n    {\r\n      title: \"Rotate\",\r\n      iconID: \"rotate-90-degrees-ccw\",\r\n      operationID: \"rotate\",\r\n    },\r\n  ],\r\n  adjust: [\r\n    {\r\n      title: \"Blur\",\r\n      iconID: \"blur-on\",\r\n      operationID: \"blur\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport function OperationSelection() {\r\n  //\r\n  const { allowedTransformOperations, allowedAdjustmentOperations } =\r\n    useContext(EditorContext);\r\n\r\n  const isTransformOnly =\r\n    allowedTransformOperations && !allowedAdjustmentOperations;\r\n  const isAdjustmentOnly =\r\n    allowedAdjustmentOperations && !allowedTransformOperations;\r\n\r\n  const [selectedOperationGroup, setSelectedOperationGroup] = React.useState<\r\n    \"transform\" | \"adjust\"\r\n  >(isAdjustmentOnly ? \"adjust\" : \"transform\");\r\n\r\n  const [, setEditingMode] = useRecoilState(editingModeState);\r\n\r\n  const filteredOperations = useMemo(() => {\r\n    // If neither are specified then allow the full range of operations\r\n    if (!allowedTransformOperations && !allowedAdjustmentOperations) {\r\n      return operations;\r\n    }\r\n    const filteredTransforms = allowedTransformOperations\r\n      ? operations.transform.filter((op) =>\r\n          allowedTransformOperations.includes(op.operationID)\r\n        )\r\n      : operations.transform;\r\n    const filteredAdjustments = allowedAdjustmentOperations\r\n      ? operations.adjust.filter((op) =>\r\n          allowedAdjustmentOperations.includes(op.operationID)\r\n        )\r\n      : operations.adjust;\r\n    if (isTransformOnly) {\r\n      return { transform: filteredTransforms, adjust: [] };\r\n    }\r\n    if (isAdjustmentOnly) {\r\n      return { adjust: filteredAdjustments, transform: [] };\r\n    }\r\n    return { transform: filteredTransforms, adjust: filteredAdjustments };\r\n  }, [\r\n    allowedTransformOperations,\r\n    allowedAdjustmentOperations,\r\n    isTransformOnly,\r\n    isAdjustmentOnly,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <ScrollView style={styles.opRow} horizontal>\r\n        {\r\n          //@ts-ignore\r\n          filteredOperations[selectedOperationGroup].map(\r\n            (item: Operation<EditingOperations>, index: number) => (\r\n              <View style={styles.opContainer} key={item.title}>\r\n                <IconButton\r\n                  text={item.title}\r\n                  iconID={item.iconID}\r\n                  onPress={() => setEditingMode(item.operationID)}\r\n                />\r\n              </View>\r\n            )\r\n          )\r\n        }\r\n      </ScrollView>\r\n      {!isTransformOnly && !isAdjustmentOnly ? (\r\n        <View style={styles.modeRow}>\r\n          <TouchableOpacity\r\n            style={[\r\n              styles.modeButton,\r\n              selectedOperationGroup === \"transform\" && {\r\n                backgroundColor: \"#333\",\r\n              },\r\n            ]}\r\n            onPress={() => setSelectedOperationGroup(\"transform\")}\r\n          >\r\n            <Icon iconID=\"transform\" text=\"Transform\" />\r\n          </TouchableOpacity>\r\n          <TouchableOpacity\r\n            style={[\r\n              styles.modeButton,\r\n              selectedOperationGroup === \"adjust\" && {\r\n                backgroundColor: \"#333\",\r\n              },\r\n            ]}\r\n            onPress={() => setSelectedOperationGroup(\"adjust\")}\r\n          >\r\n            <Icon iconID=\"tune\" text=\"Adjust\" />\r\n          </TouchableOpacity>\r\n        </View>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  opRow: {\r\n    height: 80,\r\n    width: \"100%\",\r\n    backgroundColor: \"#333\",\r\n  },\r\n  opContainer: {\r\n    height: \"100%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 16,\r\n  },\r\n  modeRow: {\r\n    height: 80,\r\n    width: \"100%\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  modeButton: {\r\n    height: 80,\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#222\",\r\n  },\r\n});\r\n"]}