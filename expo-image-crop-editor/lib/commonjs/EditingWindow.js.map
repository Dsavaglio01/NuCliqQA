{"version":3,"sources":["EditingWindow.tsx"],"names":["EditingWindow","imageLayout","setImageLayout","React","useState","imageData","imageDataState","setImageBounds","imageBoundsState","setImageScaleFactor","imageScaleFactorState","editingMode","editingModeState","setGLContext","glContextState","isCropping","isBlurring","usesGL","getImageFrame","layout","onUpdateCropLayout","editingWindowAspectRatio","height","width","imageAspectRatio","bounds","x","y","imageScaleFactor","getGLLayout","windowHeight","windowWidth","windowAspectRatio","imageHeight","imageWidth","useEffect","onGLContextCreate","gl","styles","container","glContainer","backgroundColor","transform","scaleY","image","uri","nativeEvent","StyleSheet","create","flex","resizeMode","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Image, PixelRatio, StyleSheet, View } from \"react-native\";\r\nimport { ImageCropOverlay } from \"./ImageCropOverlay\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  imageDataState,\r\n  imageBoundsState,\r\n  imageScaleFactorState,\r\n  editingModeState,\r\n  glContextState,\r\n} from \"./Store\";\r\nimport { ExpoWebGLRenderingContext, GLView } from \"expo-gl\";\r\n\r\ntype ImageLayout = {\r\n  height: number;\r\n  width: number;\r\n} | null;\r\n\r\nfunction EditingWindow() {\r\n  //\r\n  const [imageLayout, setImageLayout] = React.useState<ImageLayout>(null);\r\n\r\n  const [imageData] = useRecoilState(imageDataState);\r\n  const [, setImageBounds] = useRecoilState(imageBoundsState);\r\n  const [, setImageScaleFactor] = useRecoilState(imageScaleFactorState);\r\n  const [editingMode] = useRecoilState(editingModeState);\r\n  const [, setGLContext] = useRecoilState(glContextState);\r\n\r\n  // Get some readable boolean states\r\n  const isCropping = editingMode === \"crop\";\r\n  const isBlurring = editingMode === \"blur\";\r\n  const usesGL = isBlurring;\r\n\r\n  const getImageFrame = (layout: {\r\n    width: number;\r\n    height: number;\r\n    [key: string]: any;\r\n  }) => {\r\n    onUpdateCropLayout(layout);\r\n  };\r\n\r\n  const onUpdateCropLayout = (layout: ImageLayout) => {\r\n    // Check layout is not null\r\n    if (layout) {\r\n      // Find the start point of the photo on the screen and its\r\n      // width / height from there\r\n      const editingWindowAspectRatio = layout.height / layout.width;\r\n      //\r\n      const imageAspectRatio = imageData.height / imageData.width;\r\n      let bounds = { x: 0, y: 0, width: 0, height: 0 };\r\n      let imageScaleFactor = 1;\r\n      // Check which is larger\r\n      if (imageAspectRatio > editingWindowAspectRatio) {\r\n        // Then x is non-zero, y is zero; calculate x...\r\n        bounds.x =\r\n          (((imageAspectRatio - editingWindowAspectRatio) / imageAspectRatio) *\r\n            layout.width) /\r\n          2;\r\n        bounds.width = layout.height / imageAspectRatio;\r\n        bounds.height = layout.height;\r\n        imageScaleFactor = imageData.height / layout.height;\r\n      } else {\r\n        // Then y is non-zero, x is zero; calculate y...\r\n        bounds.y =\r\n          (((1 / imageAspectRatio - 1 / editingWindowAspectRatio) /\r\n            (1 / imageAspectRatio)) *\r\n            layout.height) /\r\n          2;\r\n        bounds.width = layout.width;\r\n        bounds.height = layout.width * imageAspectRatio;\r\n        imageScaleFactor = imageData.width / layout.width;\r\n      }\r\n      setImageBounds(bounds);\r\n      setImageScaleFactor(imageScaleFactor);\r\n      setImageLayout({\r\n        height: layout.height,\r\n        width: layout.width,\r\n      });\r\n    }\r\n  };\r\n\r\n  const getGLLayout = () => {\r\n    if (imageLayout) {\r\n      const { height: windowHeight, width: windowWidth } = imageLayout;\r\n      const windowAspectRatio = windowWidth / windowHeight;\r\n      const { height: imageHeight, width: imageWidth } = imageData;\r\n      const imageAspectRatio = imageWidth / imageHeight;\r\n      // If the window is taller than img...\r\n      if (windowAspectRatio < imageAspectRatio) {\r\n        return { width: windowWidth, height: windowWidth / imageAspectRatio };\r\n      } else {\r\n        return { height: windowHeight, width: windowHeight * imageAspectRatio };\r\n      }\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    onUpdateCropLayout(imageLayout);\r\n  }, [imageData]);\r\n\r\n  const onGLContextCreate = async (gl: ExpoWebGLRenderingContext) => {\r\n    setGLContext(gl);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {usesGL ? (\r\n        <View style={styles.glContainer}>\r\n          <GLView\r\n            style={[\r\n              {\r\n                height: 1,\r\n                width: 1,\r\n                backgroundColor: \"#ccc\",\r\n                transform: [{ scaleY: -1 }],\r\n              },\r\n              getGLLayout(),\r\n            ]}\r\n            onContextCreate={onGLContextCreate}\r\n          />\r\n        </View>\r\n      ) : (\r\n        <Image\r\n          style={styles.image}\r\n          source={{ uri: imageData.uri }}\r\n          onLayout={({ nativeEvent }) => getImageFrame(nativeEvent.layout)}\r\n        />\r\n      )}\r\n      {isCropping && imageLayout != null ? <ImageCropOverlay /> : null}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport { EditingWindow };\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#000\"\r\n  },\r\n  image: {\r\n    flex: 1,\r\n    resizeMode: \"contain\",\r\n  },\r\n  glContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n"]}