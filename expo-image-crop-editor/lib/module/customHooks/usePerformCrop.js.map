{"version":3,"sources":["usePerformCrop.tsx"],"names":["useRecoilState","accumulatedPanState","cropSizeState","editingModeState","imageBoundsState","imageDataState","imageScaleFactorState","processingState","ImageManipulator","Alert","Platform","usePerformCrop","accumulatedPan","imageBounds","imageScaleFactor","cropSize","setProcessing","imageData","setImageData","setEditingMode","onPerformCrop","croppingBounds","originX","Math","round","x","originY","y","width","height","cropResult","manipulateAsync","uri","crop","OS","webCorrection","error","alert"],"mappings":"AACA,SAASA,cAAT,QAA+B,QAA/B;AACA,SACEC,mBADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,gBAJF,EAKEC,cALF,EAMEC,qBANF,EAOEC,eAPF,QAQO,UARP;AASA,OAAO,KAAKC,gBAAZ,MAAkC,wBAAlC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,cAAhC;AAEA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAM,CAACC,cAAD,IAAmBZ,cAAc,CAACC,mBAAD,CAAvC;AACA,QAAM,CAACY,WAAD,IAAgBb,cAAc,CAACI,gBAAD,CAApC;AACA,QAAM,CAACU,gBAAD,IAAqBd,cAAc,CAACM,qBAAD,CAAzC;AACA,QAAM,CAACS,QAAD,IAAaf,cAAc,CAACE,aAAD,CAAjC;AACA,QAAM,GAAGc,aAAH,IAAoBhB,cAAc,CAACO,eAAD,CAAxC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BlB,cAAc,CAACK,cAAD,CAAhD;AACA,QAAM,GAAGc,cAAH,IAAqBnB,cAAc,CAACG,gBAAD,CAAzC;;AACA,QAAMiB,aAAa,GAAG,YAAY;AAChC,QAAI;AACF;AACA,YAAMC,cAAc,GAAG;AACrBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,KAAL,CACP,CAACZ,cAAc,CAACa,CAAf,GAAmBZ,WAAW,CAACY,CAAhC,IAAqCX,gBAD9B,CADY;AAIrBY,QAAAA,OAAO,EAAEH,IAAI,CAACC,KAAL,CACP,CAACZ,cAAc,CAACe,CAAf,GAAmBd,WAAW,CAACc,CAAhC,IAAqCb,gBAD9B,CAJY;AAOrBc,QAAAA,KAAK,EAAEL,IAAI,CAACC,KAAL,CAAWT,QAAQ,CAACa,KAAT,GAAiBd,gBAA5B,CAPc;AAQrBe,QAAAA,MAAM,EAAEN,IAAI,CAACC,KAAL,CAAWT,QAAQ,CAACc,MAAT,GAAkBf,gBAA7B;AARa,OAAvB,CAFE,CAYF;;AACAE,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAMc,UAAU,GAAG,MAAMtB,gBAAgB,CAACuB,eAAjB,CAAiCd,SAAS,CAACe,GAA3C,EAAgD,CACvE;AAAEC,QAAAA,IAAI,EAAEZ;AAAR,OADuE,CAAhD,CAAzB,CAdE,CAiBF;AACA;AACA;;AACA,UAAIX,QAAQ,CAACwB,EAAT,KAAgB,KAApB,EAA2B;AACzB,cAAMC,aAAa,GAAG,MAAM3B,gBAAgB,CAACuB,eAAjB,CAC1BD,UAAU,CAACE,GADe,EAE1B,CAAC;AAAEC,UAAAA,IAAI,EAAE,EAAE,GAAGZ,cAAL;AAAqBC,YAAAA,OAAO,EAAE,CAA9B;AAAiCI,YAAAA,OAAO,EAAE;AAA1C;AAAR,SAAD,CAF0B,CAA5B;AAIA,cAAM;AAAEM,UAAAA,GAAF;AAAOJ,UAAAA,KAAP;AAAcC,UAAAA;AAAd,YAAyBM,aAA/B;AACAjB,QAAAA,YAAY,CAAC;AAAEc,UAAAA,GAAF;AAAOJ,UAAAA,KAAP;AAAcC,UAAAA;AAAd,SAAD,CAAZ;AACD,OAPD,MAOO;AACL,cAAM;AAAEG,UAAAA,GAAF;AAAOJ,UAAAA,KAAP;AAAcC,UAAAA;AAAd,YAAyBC,UAA/B;AACAZ,QAAAA,YAAY,CAAC;AAAEc,UAAAA,GAAF;AAAOJ,UAAAA,KAAP;AAAcC,UAAAA;AAAd,SAAD,CAAZ;AACD;;AACDb,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAG,MAAAA,cAAc,CAAC,kBAAD,CAAd;AACD,KAjCD,CAiCE,OAAOiB,KAAP,EAAc;AACd;AACApB,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAP,MAAAA,KAAK,CAAC4B,KAAN,CAAY,kCAAZ;AACD;AACF,GAvCD;;AAwCA,SAAOjB,aAAP;AACD,CAjDM","sourcesContent":["import { useCallback } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  accumulatedPanState,\r\n  cropSizeState,\r\n  editingModeState,\r\n  imageBoundsState,\r\n  imageDataState,\r\n  imageScaleFactorState,\r\n  processingState,\r\n} from \"../Store\";\r\nimport * as ImageManipulator from \"expo-image-manipulator\";\r\nimport { Alert, Platform } from \"react-native\";\r\n\r\nexport const usePerformCrop = () => {\r\n  const [accumulatedPan] = useRecoilState(accumulatedPanState);\r\n  const [imageBounds] = useRecoilState(imageBoundsState);\r\n  const [imageScaleFactor] = useRecoilState(imageScaleFactorState);\r\n  const [cropSize] = useRecoilState(cropSizeState);\r\n  const [, setProcessing] = useRecoilState(processingState);\r\n  const [imageData, setImageData] = useRecoilState(imageDataState);\r\n  const [, setEditingMode] = useRecoilState(editingModeState);\r\n  const onPerformCrop = async () => {\r\n    try {\r\n      // Calculate cropping bounds\r\n      const croppingBounds = {\r\n        originX: Math.round(\r\n          (accumulatedPan.x - imageBounds.x) * imageScaleFactor\r\n        ),\r\n        originY: Math.round(\r\n          (accumulatedPan.y - imageBounds.y) * imageScaleFactor\r\n        ),\r\n        width: Math.round(cropSize.width * imageScaleFactor),\r\n        height: Math.round(cropSize.height * imageScaleFactor),\r\n      };\r\n      // Set the editor state to processing and perform the crop\r\n      setProcessing(true);\r\n      const cropResult = await ImageManipulator.manipulateAsync(imageData.uri, [\r\n        { crop: croppingBounds },\r\n      ]);\r\n      // Check if on web - currently there is a weird bug where it will keep\r\n      // the canvas from ImageManipualtor at originX + width and so we'll just crop\r\n      // the result again for now if on web - TODO write github issue!\r\n      if (Platform.OS === \"web\") {\r\n        const webCorrection = await ImageManipulator.manipulateAsync(\r\n          cropResult.uri,\r\n          [{ crop: { ...croppingBounds, originX: 0, originY: 0 } }]\r\n        );\r\n        const { uri, width, height } = webCorrection;\r\n        setImageData({ uri, width, height });\r\n      } else {\r\n        const { uri, width, height } = cropResult;\r\n        setImageData({ uri, width, height });\r\n      }\r\n      setProcessing(false);\r\n      setEditingMode(\"operation-select\");\r\n    } catch (error) {\r\n      // If there's an error dismiss the the editor and alert the user\r\n      setProcessing(false);\r\n      Alert.alert(\"An error occurred while editing.\");\r\n    }\r\n  };\r\n  return onPerformCrop;\r\n};\r\n"]}