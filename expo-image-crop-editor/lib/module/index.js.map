{"version":3,"sources":["index.tsx"],"names":["React","StyleSheet","View","StatusBar","Platform","ControlBar","EditingWindow","ImageManipulator","Processing","useRecoilState","RecoilRoot","processingState","imageDataState","editingModeState","readyState","OperationBar","UniversalModal","noScroll","require","EditorContext","createContext","throttleBlur","minimumCropDimensions","width","height","fixedAspectRatio","lockAspectRatio","mode","onCloseEditor","onEditingComplete","ImageEditorCore","props","fixedCropAspectRatio","allowedTransformOperations","allowedAdjustmentOperations","setImageData","setReady","setEditingMode","useEffect","initialise","imageUri","enableEditor","on","OS","img","document","createElement","onload","uri","src","pickerWidth","pickerHeight","manipulateAsync","off","visible","asView","ImageEditorView","ready","processing","setProcessing","styles","container","ImageEditor","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { StyleSheet, View, StatusBar, Platform } from \"react-native\";\r\nimport { ControlBar } from \"./ControlBar\";\r\nimport { EditingWindow } from \"./EditingWindow\";\r\nimport * as ImageManipulator from \"expo-image-manipulator\";\r\nimport { Processing } from \"./Processing\";\r\nimport { useRecoilState, RecoilRoot } from \"recoil\";\r\nimport {\r\n  processingState,\r\n  imageDataState,\r\n  editingModeState,\r\n  readyState,\r\n  ImageDimensions,\r\n} from \"./Store\";\r\nimport { OperationBar } from \"./OperationBar/OperationBar\";\r\nimport { UniversalModal } from \"./UniversalModal\";\r\nconst noScroll = require(\"no-scroll\");\r\n\r\ntype EditorContextType = {\r\n  throttleBlur: boolean;\r\n  minimumCropDimensions: ImageDimensions;\r\n  fixedAspectRatio: number;\r\n  lockAspectRatio: boolean;\r\n  mode: Mode;\r\n  onCloseEditor: () => void;\r\n  onEditingComplete: (result: any) => void;\r\n  allowedTransformOperations?: TransformOperations[];\r\n  allowedAdjustmentOperations?: AdjustmentOperations[];\r\n};\r\n\r\nexport const EditorContext = React.createContext<EditorContextType>({\r\n  throttleBlur: true,\r\n  minimumCropDimensions: {\r\n    width: 0,\r\n    height: 0,\r\n  },\r\n  fixedAspectRatio: 1.6,\r\n  lockAspectRatio: false,\r\n  mode: \"full\",\r\n  onCloseEditor: () => {},\r\n  onEditingComplete: () => {},\r\n});\r\n\r\nexport type Mode = \"full\" | \"crop-only\";\r\n\r\nexport type TransformOperations = \"crop\" | \"rotate\";\r\nexport type AdjustmentOperations = \"blur\";\r\nexport type EditingOperations = TransformOperations | AdjustmentOperations;\r\n\r\nexport interface ImageEditorProps {\r\n  visible: boolean;\r\n  onCloseEditor: () => void;\r\n  imageUri: string | undefined;\r\n  fixedCropAspectRatio?: number;\r\n  minimumCropDimensions?: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  onEditingComplete: (result: any) => void;\r\n  lockAspectRatio?: boolean;\r\n  throttleBlur?: boolean;\r\n  mode?: Mode;\r\n  allowedTransformOperations?: TransformOperations[];\r\n  allowedAdjustmentOperations?: AdjustmentOperations[];\r\n  asView?: boolean;\r\n}\r\n\r\nfunction ImageEditorCore(props: ImageEditorProps) {\r\n  //\r\n  const {\r\n    mode = \"full\",\r\n    throttleBlur = true,\r\n    minimumCropDimensions = { width: 0, height: 0 },\r\n    fixedCropAspectRatio: fixedAspectRatio = 1.6,\r\n    lockAspectRatio = false,\r\n    allowedTransformOperations,\r\n    allowedAdjustmentOperations,\r\n  } = props;\r\n\r\n  const [, setImageData] = useRecoilState(imageDataState);\r\n  const [, setReady] = useRecoilState(readyState);\r\n  const [, setEditingMode] = useRecoilState(editingModeState);\r\n\r\n  // Initialise the image data when it is set through the props\r\n  React.useEffect(() => {\r\n    const initialise = async () => {\r\n      if (props.imageUri) {\r\n        const enableEditor = () => {\r\n          setReady(true);\r\n          // Set no-scroll to on\r\n          noScroll.on();\r\n        };\r\n        // Platform check\r\n        if (Platform.OS === \"web\") {\r\n          let img = document.createElement(\"img\");\r\n          img.onload = () => {\r\n            setImageData({\r\n              uri: props.imageUri ?? \"\",\r\n              height: img.height,\r\n              width: img.width,\r\n            });\r\n            enableEditor();\r\n          };\r\n          img.src = props.imageUri;\r\n        } else {\r\n          const { width: pickerWidth, height: pickerHeight } =\r\n            await ImageManipulator.manipulateAsync(props.imageUri, []);\r\n          setImageData({\r\n            uri: props.imageUri,\r\n            width: pickerWidth,\r\n            height: pickerHeight,\r\n          });\r\n          enableEditor();\r\n        }\r\n      }\r\n    };\r\n    initialise();\r\n  }, [props.imageUri]);\r\n\r\n  const onCloseEditor = () => {\r\n    // Set no-scroll to off\r\n    noScroll.off();\r\n    props.onCloseEditor();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    // Reset the state of things and only render the UI\r\n    // when this state has been initialised\r\n    if (!props.visible) {\r\n      setReady(false);\r\n    }\r\n    // Check if ther mode is set to crop only if this is the case then set the editingMode\r\n    // to crop\r\n    if (mode === \"crop-only\") {\r\n      setEditingMode(\"crop\");\r\n    }\r\n  }, [props.visible]);\r\n\r\n  return (\r\n    <EditorContext.Provider\r\n      value={{\r\n        mode,\r\n        minimumCropDimensions,\r\n        lockAspectRatio,\r\n        fixedAspectRatio,\r\n        throttleBlur,\r\n        allowedTransformOperations,\r\n        allowedAdjustmentOperations,\r\n        onCloseEditor,\r\n        onEditingComplete: props.onEditingComplete,\r\n      }}\r\n    >\r\n      <StatusBar hidden={props.visible} />\r\n      {props.asView ? (\r\n        <ImageEditorView {...props} />\r\n      ) : (\r\n        <UniversalModal\r\n          visible={props.visible}\r\n          presentationStyle=\"fullScreen\"\r\n          statusBarTranslucent\r\n        >\r\n          <ImageEditorView {...props} />\r\n        </UniversalModal>\r\n      )}\r\n    </EditorContext.Provider>\r\n  );\r\n}\r\n\r\nexport function ImageEditorView(props: ImageEditorProps) {\r\n  //\r\n  const { mode = \"full\" } = props;\r\n\r\n  const [ready, setReady] = useRecoilState(readyState);\r\n  const [processing, setProcessing] = useRecoilState(processingState);\r\n\r\n  return (\r\n    <>\r\n      {ready ? (\r\n        <View style={styles.container}>\r\n          <ControlBar />\r\n          <EditingWindow />\r\n          {mode === \"full\" && <OperationBar />}\r\n        </View>\r\n      ) : null}\r\n      {processing ? <Processing /> : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function ImageEditor(props: ImageEditorProps) {\r\n  //\r\n\r\n  return (\r\n    <RecoilRoot>\r\n      <ImageEditorCore {...props} />\r\n    </RecoilRoot>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#222\",\r\n  },\r\n});\r\n"]}